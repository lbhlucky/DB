-- <20. 08. 24 >

select * from tab;      -- 지난 수업때 생성한 테이블이 잘 생성되었는지 확인

desc test2;

desc user_constraints;

SELECT constraint_name, constraint_type, search_condition, r_constraint_name
FROM user_constraints
WHERE table_name = 'TEST2'; -- 오브젝트(테이블명)같은 것은 대문자로 저장되기 때문에 반드시 대문자로 표기해야함!

--  3) Primary : Not Null 과 Unique 성격을 둘 다 가짐 (Null값 허용 X, 중복값 허용 X)
                -- 테이블을 대표하는 컬럼 또는 컬럼의 조합에 사용 가능
                -- 테이블 당 하나만 사용가능하다
                
CREATE TABLE test3      -- 실습예제 test3 생성
    (id number(10) constraint t3_id_pk primary key,
    name varchar2(30) constraint t3_name_nn not null,
    job varchar2(20),
    email varchar2(20),
    phone varchar2(20) constraint t3_ph_nn not null
                       constraint t3_ph_uk unique,
    start_date date,
    constraint t3_email_uk unique(email)    );      
    
desc test3;

SELECT constraint_name, constraint_type, search_condition, r_constraint_name
FROM user_constraints
WHERE table_name = 'TEST3';     -- 생성한 테이블의 제약 조건 확인

SELECT con.constraint_name,col.column_name, con.constraint_type, 
con.search_condition, con.r_constraint_name
FROM user_constraints con, user_cons_columns col
WHERE con.constraint_name = col.constraint_name 
AND con.table_name = 'TEST3';

    -- 4) Foreign 키 : 문법이 조금 다르므로 주의할 것
    
    -- 5) Check 키 : 조건에 만족하는 값만 허용(where에 썼던 조건식들 활용가능), 가장 많이 틀릴 수 있는 제약조건
                    -- 주의! : 컬럼명을 빼먹는 경우가 많음, 문법 주의할 것
    
-- 서브쿼리 구문을 사용해 테이블 생성                
CREATE TABLE dept80
AS
    SELECT employee_id, last_name,
            salary*12 ANNSAL,       -- 표현식은 컬럼명이 될 수 없으므로 반드시 컬럼alias를 사용해야함!
            hire_date
    FROM employees
    WHERE department_id = 80;
    
desc dept80;

select * from dept80;

SELECT con.constraint_name,col.column_name, con.constraint_type, 
con.search_condition, con.r_constraint_name
FROM user_constraints con, user_cons_columns col
WHERE con.constraint_name = col.constraint_name 
AND con.table_name = 'DEPT80';
-- => 구조는 똑같지만 같은 제약조건명을 쓸 수 없으므로 알아서 만들어줌,
--      not null을 제약조건을 제외한 나머지 모든 제약 조건은 풀려서 복사됨
--      필요한 경우는 직접 제약조건을 걸어줘야함

-- 테이블 수정(ALTER)
-- 1)테이블에 컬럼 추가(ADD)
ALTER TABLE dept80
ADD (job_id varchar2(9));

desc dept80;
select * from dept80;       -- 복사된 값이 아니기 떄문에 Null값이 들어가있음

-- 2) 기존 테이블 컬럼 수정(MODIFY) - 데이터타입, 컬럼사이즈, Default값 등등
--  => 데이터 타입을 변경하려면 기존의 컬럼의 내용을 싹 다 비운 후 사용해야함
alter table dept80
modify (last_name varchar2(30));

desc dept80

-- 3) 기존 테이블 컬럼 삭제(DROP)
alter table dept80
drop column job_id;

desc dept80

-- 4) 기존 컬럼에 제약 조건 추가(ADD)

create table emp2
as
select * from employees;

select * from employees;

SELECT con.constraint_name,col.column_name, con.constraint_type, 
con.search_condition, con.r_constraint_name
FROM user_constraints con, user_cons_columns col
WHERE con.constraint_name = col.constraint_name 
AND con.table_name = 'EMP2';

alter table emp2
add constraint emp2_emp_id_pk
primary key(employee_id);       -- 제약조건 primary key 추가


alter table emp2
add constraint emp_mgr_fk
foreign key(manager_id)
references emp2(employee_id);       -- 제약조건 foreign key 추가

SELECT con.constraint_name,col.column_name, con.constraint_type, 
con.search_condition, con.r_constraint_name          -- r_constraint_name은 외래키가 어디를 참조하는 지 알려줌
FROM user_constraints con, user_cons_columns col
WHERE con.constraint_name = col.constraint_name 
AND con.table_name = 'EMP2';        -- 제약조건이 제대로 추가됐는지 확인

delete emp2;

insert into emp2 (employee_id, last_name, email, hire_date, job_id, manager_id)
values (100, 'Kim', 'KKKK', sysdate, 'NOVICE', 102);
-- => 제약조건이 걸린 상태에서 새로 만들기는 불가는하므로 제약조건을 먼저 삭제해줘야한다

-- 5) 기존의 제약조건 삭제
alter table emp2
drop constraint emp_mgr_fk;

-- 일시적으로 제약 조건 끄는 법
alter table emp2
disable constraint emp_mgr_fk;

-- 일시적으로 제약 조건 켜는 법
alter table emp2
enable constraint emp_mgr_fk;

-- 테이블 삭제(DROP)
drop table dept80;

select * from tab;

-- FLASHBACK 기능 : 실수로 테이블을 삭제한 경우 되살리는 작업

select original_name, operation, droptime from recyclebin; -- 먼저 휴지통에 테이블이 있는지 확인
-- => bin$으로 시작하는 것은 삭제되어 휴지통에 보관중인 테이블임

flashback table dept80  to before drop;

-- 휴지통을 거치지 않고 테이블 삭제하기(PURGE) (완전삭제)
drop table dept80 purge;
